from __future__ import division, print_function, absolute_import

import tflearn
from tflearn.data_utils import shuffle, to_categorical
from tflearn.layers.core import input_data, dropout, fully_connected
from tflearn.layers.conv import conv_2d, max_pool_2d
from tflearn.layers.normalization import local_response_normalization
from tflearn.layers.estimator import regression
from tflearn.data_preprocessing import ImagePreprocessing
from tflearn.data_augmentation import ImageAugmentation
import numpy as np
import platform
import os

#Setup the environment

if platform.system() == "Windows":
    startDir = 'D:\\VirtualBoxSharedFolders\\CS297'
elif platform.system() == "Linux":
    startDir = '/media/sf_VirtualBoxSharedFolders/CS297'
baseTrainingDirectoryName = startDir + os.path.sep + 'NN_Recognition_Train' + os.path.sep
noOfFamiliesInCurrentRun = 2


# Data loading and preprocessing
numpyArrayDir = startDir + os.path.sep + 'NN_Recognition_Numpy_Arrays/'
X, Y = np.load(numpyArrayDir+'X_Train_' + str(noOfFamiliesInCurrentRun) + '.npy'), np.load(numpyArrayDir+'Y_Train_' + str(noOfFamiliesInCurrentRun) + '.npy')
X_test,Y_test = np.load(numpyArrayDir+'X_Test_' + str(noOfFamiliesInCurrentRun) +'.npy'), np.load(numpyArrayDir+'Y_Test_' + str(noOfFamiliesInCurrentRun) + '.npy')
X = X.reshape([-1, 64, 64, 1])
X_test = X_test.reshape([-1, 64, 64, 1])
print (X.shape, Y.shape, Y[:2,:],Y_test.shape)
X, Y = shuffle(X, Y)

# Real-time data preprocessing
img_prep = ImagePreprocessing()
img_prep.add_featurewise_zero_center()
img_prep.add_featurewise_stdnorm()

# Real-time data augmentation
img_aug = ImageAugmentation()
img_aug.add_random_flip_leftright()
img_aug.add_random_rotation(max_angle=25.)

# Building convolutional network
network = input_data(shape=[None, 64, 64, 1], name='input')
network = conv_2d(network, 128, 3, activation='relu', regularizer="L2")
network = max_pool_2d(network, 2)
network = local_response_normalization(network)
network = conv_2d(network, 256, 3, activation='relu', regularizer="L2")
network = max_pool_2d(network, 2)
network = local_response_normalization(network)
network = fully_connected(network, 256, activation='tanh')
network = dropout(network, 0.8)
network = fully_connected(network, 512, activation='tanh')
network = dropout(network, 0.8)
network = fully_connected(network, 2, activation='softmax')
network = regression(network, optimizer='adam', learning_rate=0.01,
                     loss='categorical_crossentropy', name='target')

# Training
model = tflearn.DNN(network, tensorboard_verbose=0)
model.fit({'input': X}, {'target': Y}, n_epoch=20,
           validation_set=({'input': X_test}, {'target': Y_test}),
           snapshot_step=100, show_metric=True, run_id='convnet_malicia')