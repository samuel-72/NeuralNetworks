import tensorflow as tf
import numpy as np
import platform
import os

if platform.system() == "Windows":
    startDir = 'D:\\VirtualBoxSharedFolders\\CS297'
elif platform.system() == "Linux":
    startDir = '/media/sf_VirtualBoxSharedFolders/CS297'
baseTrainingDirectoryName = startDir + os.path.sep + 'NN_Recognition_Train' + os.path.sep,
noOfFamiliesInCurrentRun = len([name for name in os.listdir(baseTrainingDirectoryName) if
                                os.path.isdir(baseTrainingDirectoryName + name) and name.find('_resized') == -1])  # vector of strings with family names

x = tf.placeholder(tf.float32, [None, 4096])

W = tf.Variable(tf.zeros([4096, noOfFamiliesInCurrentRun]))
b = tf.Variable(tf.zeros([noOfFamiliesInCurrentRun]))
y = tf.matmul(x, W) + b

# Define loss and optimizer
y_ = tf.placeholder(tf.float32, [None, noOfFamiliesInCurrentRun])

# The raw formulation of cross-entropy,
#
#   tf.reduce_mean(-tf.reduce_sum(y_ * tf.log(tf.nn.softmax(y)),
#                                 reduction_indices=[1]))
#
# can be numerically unstable.
#
# So here we use tf.nn.softmax_cross_entropy_with_logits on the raw
# outputs of 'y', and then average across the batch.
cross_entropy = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=y_, logits=y))
#train_step = tf.train.GradientDescentOptimizer(0.5).minimize(cross_entropy)

train_step = tf.train.ProximalGradientDescentOptimizer(0.4).minimize(cross_entropy)

sess = tf.InteractiveSession()
tf.global_variables_initializer().run()

# Train

numpyArrayDir = startDir + os.path.sep + 'NN_Recognition_Numpy_Arrays/'
#for _ in range(1000):
#batch_xs, batch_ys = mnist.train.next_batch(100)
batch_xs, batch_ys = np.load(numpyArrayDir+'X_Train_' + str(noOfFamiliesInCurrentRun) + '.npy'), np.load(numpyArrayDir+'Y_Train_' + str(noOfFamiliesInCurrentRun) + '.npy')
sess.run(train_step, feed_dict={x: batch_xs, y_: batch_ys})

# Test trained model
correct_prediction = tf.equal(tf.argmax(y, 1), tf.argmax(y_, 1))
accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))
x_test,y_test = np.load(numpyArrayDir+'X_Test_' + str(noOfFamiliesInCurrentRun) +'.npy'), np.load(numpyArrayDir+'Y_Test_' + str(noOfFamiliesInCurrentRun) + '.npy')
print(sess.run(accuracy, feed_dict={x: x_test,
                                  y_: y_test}))
