import os
import glob
import platform
import numpy as np
from PIL import Image

X_Train,Y_Train,X_Test,Y_Test = None,None,None,None
labelIndex = {'Adialer.C' : 0,'Agent.FYI' : 1,'Allaple.A' : 2,'Allaple.L' : 3,'Alueron.gen!J' : 4,'Autorun.K' : 5,'C2LOP.gen!g' : 6,'C2LOP.P' : 7,'Dialplatform.B' : 8,'Dontovo.A' : 9,'Fakerean' : 10,'Instantaccess' : 11,'Lolyda.AA1' : 12,'Lolyda.AA2' : 13,'Lolyda.AA3' : 14,'Lolyda.AT' : 15,'Malex.gen!J' : 16,'Obfuscator.AD' : 17,'Rbot!gen' : 18,'Skintrim.N' : 19,'Swizzor.gen!E' : 20,'Swizzor.gen!I' : 21,'VB.AT' : 22,'Wintrim.BX' : 23,'Yuner.A' : 24}
noOfFamiliesInCurrentRun = 0
if platform.system() == "Windows":
    startDir = 'D:\\VirtualBoxSharedFolders\\CS297'
elif platform.system() == "Linux":
    startDir = '/media/sf_VirtualBoxSharedFolders/CS297'

def resizeAndSaveImages(baseDirectoryName,trainImgDir=True,testImgDir=False):
    """
    This module resizes all images in a given directory to 64 x 64 and Antialiases them
    """
    global X_Train,Y_Train,X_Test,Y_Test, labelIndex, noOfFamiliesInCurrentRun
    saveResizedImages = True
    print "The input directory whose images will be resized is : %s.\n" % baseDirectoryName
    list_fams = [ name for name in os.listdir(baseDirectoryName) if os.path.isdir(baseDirectoryName+name) and name.find('_resized') == -1 ] # vector of strings with family names
    print list_fams
    label = {}
    noOfFamiliesInCurrentRun = len(list_fams)
    for familyName in list_fams:
        temp = np.zeros(noOfFamiliesInCurrentRun)
        temp[labelIndex[familyName]] = 1
        label[familyName] = temp

    i = 0
    for currentDirectory in list_fams:
        currentWorkingDirectory = baseDirectoryName + currentDirectory
        # Create the coressponding op dir for each input dir
        # If the op dir already exists then skip processing
        opDirectoryName = baseDirectoryName + currentDirectory + '_resized' + os.path.sep
        if os.path.isdir(opDirectoryName):
            print "The output directory in which the resized images are to be placed already exists, hence program will not store them again.\n"
            saveResizedImages = False
        else:
            os.mkdir(opDirectoryName)
        # Get into the cwd    
        os.chdir(currentWorkingDirectory)
        img_list = glob.glob('*.png') # Getting only 'png' files in a folder
        # For each image, resize, antialias it and save it as a numpy array in X_Train, get the coressponding label into Y_Train
        for img in img_list:
            im = Image.open(img).resize((64,64),Image.ANTIALIAS)
            if saveResizedImages:
                im.save(opDirectoryName+img)
            if trainImgDir:
                X_Train[i] = np.asarray(im).flatten()
                Y_Train[i] = label.get(currentDirectory, np.array([0,0]))
            elif testImgDir:
                X_Test[i] = np.asarray(im).flatten()
                Y_Test[i] = label.get(currentDirectory, np.array([0,0]))
            i += 1
        print "\nAll the images have been processed\n"

def main():
    global X_Train,Y_Train,X_Test,Y_Test, noOfFamiliesInCurrentRun
    noOfTrainingFiles = 4285
    noOfTestingFiles = 493
    baseTrainingDirectoryName = startDir + os.path.sep + 'NN_Recognition_Train' + os.path.sep
    noOfFamiliesInCurrentRun = len([ name for name in os.listdir(baseTrainingDirectoryName) if os.path.isdir(baseTrainingDirectoryName+name) and name.find('_resized') == -1 ] ) # vector of strings with family names
    X_Train = np.zeros(noOfTrainingFiles * 4096).reshape(noOfTrainingFiles,4096)
    Y_Train = np.zeros(noOfTrainingFiles * noOfFamiliesInCurrentRun).reshape(noOfTrainingFiles,noOfFamiliesInCurrentRun)
    X_Test = np.zeros(noOfTestingFiles * 4096).reshape(noOfTestingFiles,4096)
    Y_Test = np.zeros(noOfTestingFiles * noOfFamiliesInCurrentRun).reshape(noOfTestingFiles,noOfFamiliesInCurrentRun)
        
    # Call the function resizeAndSaveImages with a "Directory Name" to resize all the images in a given directory to 64x64 and ANTIALIAS them
    resizeAndSaveImages(startDir + os.path.sep + 'NN_Recognition_Train' + os.path.sep,True,False)
    resizeAndSaveImages(startDir + os.path.sep + 'NN_Recognition_Test' + os.path.sep,False,True)                                    
    # Sanity check X_Train, Y_Train
    print "\n\nSanity Check for Train Dataset", X_Train.shape, Y_Train.shape
    print "\n\nPrinting first image data",X_Train[0], Y_Train[0]
    print "\n\nPrinting last image data",X_Train[-1], Y_Train[-1]
    # Sanity check X_Test, Y_Test
    print "\n\nSanity Check for Test Dataset", X_Test.shape, Y_Test.shape
    print "\n\nPrinting first image data",X_Train[0], Y_Train[0]
    print "\n\nPrinting last image data",X_Train[-1], Y_Train[-1]

    # Save the numpy arrays on disk for fast retreival
    numpyOpDir = startDir + '/NN_Recognition_Numpy_Arrays/'
    
    np.save(numpyOpDir + '/X_Train_' + str(noOfFamiliesInCurrentRun) + '.npy',X_Train)
    np.save(numpyOpDir + '/Y_Train_' + str(noOfFamiliesInCurrentRun) + '.npy',Y_Train)
    np.save(numpyOpDir + '/X_Test_' + str(noOfFamiliesInCurrentRun) + '.npy',X_Test)
    np.save(numpyOpDir + '/Y_Test_' + str(noOfFamiliesInCurrentRun) + '.npy',Y_Test)
    
if __name__ == '__main__':
    main()
    
"""    
from scipy import misc
import os

os.chdir('D:\\VirtualBoxSharedFolders\\CS297\\NN_Recognition\\Adialer.C\\')

listOfFiles = []

listOfFiles.append(misc.imread('000bde2e9a94ba41c0c111ffd80647c2.png'))


print listOfFiles, listOfFiles[0].shape, listOfFiles[0].flatten().shape

face = misc.imread('000bde2e9a94ba41c0c111ffd80647c2.png')
f = misc.face(gray=True)  # retrieve a grayscale image
import matplotlib.pyplot as plt
plt.imshow(f, cmap=plt.cm.gray)     
"""
